// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/10/2019 00:46:53"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ExecutionUnit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ExecutionUnit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Cin;
reg CLK;
reg Enable;
reg [1:0] OP1;
reg [1:0] OP2;
reg [1:0] S;
reg [3:0] V;
// wires                                               
wire [3:0] AOut;
wire [3:0] BOut;
wire CarryOut;
wire [3:0] COut;
wire Invalid;

// assign statements (if any)                          
ExecutionUnit i1 (
// port map - connection between master ports and signals/registers   
	.AOut(AOut),
	.BOut(BOut),
	.CarryOut(CarryOut),
	.Cin(Cin),
	.CLK(CLK),
	.COut(COut),
	.Enable(Enable),
	.Invalid(Invalid),
	.OP1(OP1),
	.OP2(OP2),
	.S(S),
	.V(V)
);
initial 
begin 
#1000000 $finish;
end 

// Cin
initial
begin
	Cin = 1'b0;
end 

// CLK
initial
begin
	CLK = 1'b1;
end 

// Enable
initial
begin
	Enable = 1'b1;
end 
// OP1[ 1 ]
initial
begin
	OP1[1] = 1'b0;
end 
// OP1[ 0 ]
initial
begin
	OP1[0] = 1'b0;
end 
// OP2[ 1 ]
initial
begin
	OP2[1] = 1'b0;
end 
// OP2[ 0 ]
initial
begin
	OP2[0] = 1'b1;
end 
// S[ 1 ]
initial
begin
	S[1] = 1'b1;
end 
// S[ 0 ]
initial
begin
	S[0] = 1'b0;
end 
// V[ 3 ]
initial
begin
	V[3] = 1'b0;
end 
// V[ 2 ]
initial
begin
	V[2] = 1'b0;
end 
// V[ 1 ]
initial
begin
	V[1] = 1'b0;
end 
// V[ 0 ]
initial
begin
	V[0] = 1'b0;
end 
endmodule

